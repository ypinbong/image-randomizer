import { useState, useCallback, useRef } from "react";
import { TransitionGroup } from "react-transition-group";
import { Button, Image } from "@/components";
import { alpha, Box, List, ListItem, Slide, Typography } from "@mui/material";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { SnackbarProvider, useSnackbar } from "notistack";

export default function TransitionGroupExample() {
  const { enqueueSnackbar } = useSnackbar();
  const [images, setImages] = useState<string[]>([])
  const [loading, setLoading] = useState(false);
  const addBtnRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    setTimeout(() => {
      if (addBtnRef.current) {
        addBtnRef.current.scrollIntoView({ behavior: "smooth", block: "end" });
      }
    }, 500);
  };

  const fetchFiveImages = useCallback(
    async () => {
      setLoading(true);
      try {
        const isMax = images.length >= 5;
        const res = await Promise.all(Array.from({ length: isMax ? 5 : 5 - images.length }, () => fetch("https://picsum.photos/100/100")));
        if (res.map(img => img.status).every(status => status === 200)) {
          setImages(prev => isMax ? [...res.map(img => img.url)] : [...prev, ...res.map(img => img.url)]);
          scrollToBottom();
        } else {
          enqueueSnackbar("Failed to fetch images", { variant: "error" });
        }
      } catch (error) {
        console.log("index.tsx ~ line 29: error:", error);
        enqueueSnackbar("Failed to fetch images", { variant: "error" });
      }
      setLoading(false);
    },
    [
      enqueueSnackbar,
      images,
      scrollToBottom,
      setImages,
      setLoading,
    ]
  );

  const fetchAnImage = useCallback(
    async () => {
      setLoading(true);
      try {
        const img = await fetch("https://picsum.photos/100/100");
        if (img.status === 200) {
          setImages(prev => [...prev, img.url]);
          scrollToBottom();
        } else {
          enqueueSnackbar("Failed to fetch image", { variant: "error" });
        };
      } catch (error) {
        enqueueSnackbar("Failed to fetch image", { variant: "error" });
      }
      setLoading(false);
    },
    [
      enqueueSnackbar,
      scrollToBottom,
      setImages,
      setLoading,
    ]
  );

  const removeRandomImage = useCallback(
    () => {
      if (images.length === 0) return;
      if (images.length === 1) return setImages([]);
      const randomIndex = Math.floor(Math.random() * images.length);
      setImages(prev => [...prev.filter((_, index) => index !== randomIndex)]);
    },
    [
      images,
      setImages
    ]
  );

  return (
    <>
      <Head>
        <title>Image Randomizer</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.center} />
        <div className={styles.header}>
          <Typography fontSize="20px" className={styles.code}>
            Random Image Generator
          </Typography>
        </div>
        <div className={styles.listWrapper}>
          {images.length === 0 && <Box
            className={styles.card}
            sx={{
              border: `1px solid ${alpha("#fff", 0.20)} !important`,
            }}
          >
            <Typography className={styles.code}>
              {loading ? "Generating images..." : "No Image to display. Click 'Add an Image' to get started."}
            </Typography>
          </Box>}
          <List>
            <TransitionGroup>
              {images.map((item) => (
                <Slide direction="left" key={item}>{Image(item)}</Slide>
              ))}
              <ListItem
                className={styles.card}
                onClick={fetchAnImage}
                sx={{
                  cursor: "pointer",
                  opacity: images.length >= 5 || loading ? 0.5 : 1,
                  pointerEvents: images.length >= 5 || loading ? "none" : "auto",
                }}
              >
                <Typography ref={addBtnRef} className={styles.code}>
                  + Add an Image
                </Typography>
              </ListItem>
            </TransitionGroup>
          </List>
        </div>
        <div className={styles.footer}>
          <Button
            variant="contained"
            disabled={loading}
            onClick={fetchFiveImages}
            sx={{
              backgroundColor: "#fff !important",
              color: "#000 !important",
              "&:hover": {
                backgroundColor: `${alpha("#fff", 0.70)} !important`,
              }
            }}
          >
            <Typography className={styles.code} textTransform="none">
              {images.length < 5 ? `Add ${5 - images.length} Images` : "Randomize Images"}
            </Typography>
          </Button>
          <Button
            variant="outlined"
            onClick={removeRandomImage}
            disabled={loading || images.length === 0}
            sx={{
              borderColor: "#fff !important",
              color: "#fff !important",
              "&:hover": {
                borderColor: `${alpha("#fff", 0.70)} !important`,
                color: `${alpha("#fff", 0.70)} !important`,
              }
            }}
          >
            <Typography className={styles.code} component="span" textTransform="none">
              Remove a Random Image
            </Typography>
          </Button>
        </div>
      </main>
      <SnackbarProvider />
    </>
  );
};